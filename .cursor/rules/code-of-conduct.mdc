---
description:
globs:
alwaysApply: true
---

## Regler for brug af log

This file provides a scoped logging utility for the app using the `logger` package.

Usage:

- At the top of any Dart file where you want to log, define: `static final log = scopedLogger(LogCategory.gui);` (or use `provider`, `service`, or `other` depending on the file's role)
- Use `log("message")` anywhere in the file to log with the correct category tag.
- Categories can be filtered during development via `LogConfig`, which controls what is actually logged.
- Log messages are prefixed with their category, e.g., `[GUI]`, `[SERVICE]`, etc., and printed using PrettyPrinter.

- Skriv korte og beskrivende log-info.
- TilfÃ¸j filpath og evt. funktionsnavn hvor loggen skrives fra.

## Dart/Flutter Rules

- Use const constructors for immutable widgets
- **MANDATORY: Add test keys to ALL interactive widgets** (buttons, form fields, cards, navigation elements)
- Use Freezed for immutable state classes and unions
- Use arrow syntax for simple functions
- Use trailing commas for better formatting
- Prefer expression bodies for one-line getters/setters
- Implement proper widget cleanup in dispose()
- Always declare types for variables and functions
- Avoid using 'any' type
- One export per file
- No blank lines within functions

## Date/Time & Timezone Rules

- Store UTC in backend (Supabase):
  - Always write timestamps as `DateTime.now().toUtc()` and serialize using ISO 8601 (ends with `Z`).
- Treat all received timestamps as UTC:
  - Consider values from Supabase to be UTC unless explicitly documented otherwise.
- Display in local timezone:
  - Before formatting or reading fields (hour/day/etc.) for the UI, always call `.toLocal()`.
  - Example:
    ```dart
    final local = utcFromApi.toLocal();
    final hhmm = '${local.hour.toString().padLeft(2, '0')}:${local.minute.toString().padLeft(2, '0')}';
    ```
- Do time math in a normalized zone:
  - For durations/comparisons, normalize both sides (prefer UTC) to avoid ambiguity:
    ```dart
    final diff = DateTime.now().toUtc().difference(createdAtUtc.toUtc());
    ```
- Testing:
  - Add tests asserting local rendering from UTC inputs and DST correctness.

## Test Key Requirements

- **All CustomButton widgets**: `key: const Key('action_context_button')`
- **All TextFormField widgets**: `key: const Key('purpose_field')`
- **All GestureDetector widgets with onTap**: `key: const Key('content_type_card')`
- **All navigation elements**: Context-appropriate keys
- **Use snake_case naming**: descriptive and specific
- **Include in code reviews**: Verify test keys are present

## Error Handling

- Use AsyncValue for proper error handling
- Display errors in SelectableText.rich with red color
- Handle empty states within screens
- Implement proper Supabase error handling

## Riverpod Guidelines

- Use @riverpod annotation for provider generation
- Prefer AsyncNotifierProvider over StateProvider
- Use ref.watch() for reactive state
- Use ref.read() for one-time operations
- Implement proper async cancellation

## Navigation

- Always use GoRouter then use GoRouter.info and not '/onboarding/info'
- Implement auth-based guards
- Follow route naming conventions
- Handle deep linking properly
- i @app_router.app skal routes laves som dette eksempel:

      GoRoute(
        path: RoutePaths.splash,
        pageBuilder: (context, state) => _buildPageWithTransition(
          key: state.pageKey,
          child: const SplashScreen(),
        ),
      ),

## Performance

- Use const widgets where possible
- Optimize list views
- Use cached_network_image
- Follow Flutter best practices

## Documentation

- Document complex logic thoroughly
- Follow official Flutter guidelines
- Include comments for non-obvious code
